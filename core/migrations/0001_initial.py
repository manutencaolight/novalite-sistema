# Generated by Django 5.2.2 on 2025-07-28 15:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empresa', models.CharField(max_length=255, verbose_name='Empresa')),
                ('representante', models.CharField(max_length=255, verbose_name='Representante')),
                ('endereco', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail para Notificações')),
                ('telefone', models.CharField(blank=True, help_text='Use o formato internacional (ex: +5521999998888)', max_length=20, null=True, verbose_name='Telefone/WhatsApp')),
                ('telefone_representante', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone do Representante')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['empresa'],
            },
        ),
        migrations.CreateModel(
            name='Consumivel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, unique=True, verbose_name='Nome do Consumível')),
                ('categoria', models.CharField(choices=[('FITAS', 'Fitas (Isolante, Crepe, Silver Tape)'), ('FIXADORES', 'Fixadores (Abraçadeiras, Hellerman)'), ('CONECTORES', 'Conectores e Adaptadores Descartáveis'), ('OUTROS', 'Outros Consumíveis')], default='OUTROS', max_length=100)),
                ('unidade_medida', models.CharField(default='unidade', help_text='Ex: unidade, rolo, metro, caixa', max_length=20)),
                ('quantidade_estoque', models.IntegerField(default=0, verbose_name='Quantidade em Estoque')),
            ],
            options={
                'verbose_name': 'Consumível',
                'verbose_name_plural': 'Consumíveis',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Equipamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modelo', models.CharField(max_length=255)),
                ('fabricante', models.CharField(blank=True, max_length=255, null=True)),
                ('categoria', models.CharField(choices=[('Acessórios em Geral', 'Acessórios em Geral'), ('Adaptadores', 'Adaptadores'), ('Consoles', 'Consoles'), ('Efeitos', 'Efeitos'), ('Estruturas', 'Estruturas (Box Truss, Praticáveis)'), ('Iluminação Convencional', 'Iluminação Convencional'), ('LEDs', 'LEDs'), ('Moving Lights', 'Moving Lights'), ('Prolongas e Chicotes', 'Prolongas e Chicotes'), ('Rack Dimmer', 'Rack Dimmer'), ('Sonorização', 'Sonorização'), ('Vídeo', 'Vídeo (Painéis de LED, Projeções)'), ('Outros', 'Outros')], default='Acessórios em Geral', max_length=100)),
                ('quantidade_estoque', models.IntegerField(default=0)),
                ('quantidade_manutencao', models.IntegerField(default=0)),
                ('peso', models.FloatField(blank=True, default=0.0, null=True)),
            ],
            options={
                'verbose_name': 'Equipamento',
                'verbose_name_plural': 'Equipamentos',
                'ordering': ['modelo'],
            },
        ),
        migrations.CreateModel(
            name='Funcionario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome Completo')),
                ('funcao', models.CharField(blank=True, max_length=100, null=True)),
                ('tipo', models.CharField(choices=[('funcionario', 'Funcionário'), ('freelancer', 'Freelancer')], default='funcionario', max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail para Notificações')),
                ('contato', models.CharField(blank=True, help_text='Use o formato internacional (ex: +5521999998888)', max_length=20, null=True, verbose_name='Telefone/WhatsApp')),
            ],
            options={
                'verbose_name': 'Funcionário',
                'verbose_name_plural': 'Funcionários',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Veiculo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome/Apelido')),
                ('placa', models.CharField(max_length=10, unique=True)),
                ('tipo', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('Disponível', 'Disponível'), ('Em Viagem', 'Em Viagem'), ('Em Manutenção', 'Em Manutenção')], default='Disponível', max_length=20)),
            ],
            options={
                'verbose_name': 'Veículo',
                'verbose_name_plural': 'Veículos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('planejamento', 'Planeamento'), ('logistica', 'Logística'), ('manutencao', 'Manutenção')], default='planejamento', max_length=20, verbose_name='Nível de Acesso')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PLANEJAMENTO', 'Em Planejamento'), ('AGUARDANDO_CONFERENCIA', 'Aguardando Conferência'), ('AGUARDANDO_SAIDA', 'Aguardando Saída'), ('EM_ANDAMENTO', 'Em Andamento'), ('FINALIZADO', 'Finalizado'), ('CANCELADO', 'Cancelado')], default='PLANEJAMENTO', max_length=30, verbose_name='Status da Operação')),
                ('tipo_evento', models.CharField(choices=[('PROPRIO', 'Evento Próprio'), ('SUBLOCACAO', 'Sublocação'), ('EMPRESTIMO', 'Empréstimo')], default='PROPRIO', max_length=20, verbose_name='Tipo de Operação')),
                ('nome', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Evento/Descrição')),
                ('local', models.CharField(blank=True, max_length=255, null=True)),
                ('responsavel_local_nome', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Responsável no Local')),
                ('responsavel_local_contato', models.CharField(blank=True, max_length=20, null=True, verbose_name='Contato do Responsável')),
                ('data_montagem', models.DateField(blank=True, null=True, verbose_name='Data de Montagem')),
                ('data_evento', models.DateField(verbose_name='Data de Início/Saída')),
                ('data_termino', models.DateField(blank=True, null=True, verbose_name='Data de Término/Retorno')),
                ('modificado_em', models.DateTimeField(auto_now=True, verbose_name='Última Modificação')),
                ('observacao_correcao', models.TextField(blank=True, null=True, verbose_name='Observação para Correção')),
                ('tipo_energia', models.CharField(blank=True, choices=[('220V', '220V'), ('380V', '380V'), ('Bifásico', 'Bifásico'), ('Trifásico', 'Trifásico'), ('Não se aplica', 'Não se aplica')], max_length=20, null=True, verbose_name='Tipo de Energia Local')),
                ('distancia_energia_metros', models.IntegerField(default=0, verbose_name='Distância do Ponto de Energia (metros)')),
                ('ponto_acesso_veiculo', models.CharField(blank=True, choices=[('Fácil', 'Fácil (ex: doca, acesso direto)'), ('Médio', 'Médio (ex: escadas, corredores)'), ('Difícil', 'Difícil (ex: restrito, içamento)')], max_length=20, null=True, verbose_name='Acesso de Veículo/Carga')),
                ('necessita_gerador', models.BooleanField(default=False, verbose_name='Necessita de Gerador?')),
                ('observacoes_tecnicas', models.TextField(blank=True, null=True, verbose_name='Observações Técnicas Adicionais')),
                ('motivo_cancelamento', models.TextField(blank=True, null=True, verbose_name='Motivo do Cancelamento')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cliente', verbose_name='Cliente/Empresa')),
                ('equipe', models.ManyToManyField(blank=True, related_name='eventos', to='core.funcionario')),
                ('veiculos', models.ManyToManyField(blank=True, related_name='eventos', to='core.veiculo')),
            ],
            options={
                'verbose_name': 'Operação',
                'verbose_name_plural': 'Operações (Eventos, Empréstimos, etc)',
                'ordering': ['-data_evento'],
            },
        ),
        migrations.CreateModel(
            name='FotoPreEvento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagem', models.ImageField(upload_to='fotos_pre_evento/')),
                ('descricao', models.CharField(blank=True, max_length=255)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fotos', to='core.evento')),
            ],
            options={
                'verbose_name': 'Foto do Pré-Evento',
                'verbose_name_plural': 'Fotos do Pré-Evento',
            },
        ),
        migrations.CreateModel(
            name='MaterialEvento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_descricao', models.CharField(blank=True, max_length=255, null=True, verbose_name='Item de Consumo/Descrição')),
                ('quantidade', models.IntegerField(verbose_name='Qtd. Planejada')),
                ('quantidade_separada', models.IntegerField(default=0, verbose_name='Qtd. com Saída')),
                ('conferido', models.BooleanField(default=False, verbose_name='Item Conferido')),
                ('status_suprimento', models.CharField(choices=[('OK', 'Estoque OK'), ('PENDENTE', 'Insuficiente - Pendente de Ação'), ('SUBLOCADO', 'Resolvido (Sublocação)'), ('EMPRESTIMO', 'Resolvido (Empréstimo)'), ('COMPRADO', 'Resolvido (Compra)'), ('SUBSTITUIDO', 'Resolvido (Substituição)')], default='OK', max_length=20, verbose_name='Status do Suprimento')),
                ('equipamento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.equipamento')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.evento')),
            ],
            options={
                'verbose_name': 'Material do Evento',
                'verbose_name_plural': 'Materiais dos Eventos',
            },
        ),
        migrations.CreateModel(
            name='ItemRetornado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField()),
                ('condicao', models.CharField(choices=[('OK', 'Bom Estado'), ('DEFEITO', 'Com Defeito'), ('QUEBRADO', 'Quebrado'), ('PERDIDO', 'Perdido/Sumiu')], default='OK', max_length=20)),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observação (ex: lente trincada, cabo partido)')),
                ('data_retorno', models.DateTimeField(auto_now_add=True)),
                ('material_evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens_retornados', to='core.materialevento')),
            ],
        ),
        migrations.CreateModel(
            name='RegistroManutencao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('AGUARDANDO_AVALIACAO', 'Aguardando Avaliação'), ('EM_REPARO', 'Em Reparo'), ('AGUARDANDO_PECAS', 'Aguardando Peças'), ('REPARADO', 'Reparado / Pronto para Estoque')], default='AGUARDANDO_AVALIACAO', max_length=30)),
                ('descricao_problema', models.TextField()),
                ('solucao_aplicada', models.TextField(blank=True, null=True)),
                ('data_entrada', models.DateTimeField(auto_now_add=True)),
                ('data_saida', models.DateTimeField(blank=True, null=True)),
                ('equipamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historico_manutencao', to='core.equipamento')),
                ('item_retornado', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.itemretornado')),
            ],
        ),
        migrations.CreateModel(
            name='ConsumivelEvento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.IntegerField(verbose_name='Quantidade Planeada')),
                ('conferido', models.BooleanField(default=False)),
                ('consumivel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.consumivel')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumiveis_set', to='core.evento')),
            ],
            options={
                'verbose_name': 'Consumível do Evento',
                'verbose_name_plural': 'Consumíveis do Evento',
                'unique_together': {('evento', 'consumivel')},
            },
        ),
    ]
